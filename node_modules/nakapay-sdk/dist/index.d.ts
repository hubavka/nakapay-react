export interface PaymentRequestOptions {
    amount: number;
    description: string;
    destinationWallet: string;
    metadata?: Record<string, any>;
    expiresIn?: number;
}
export interface WebhookOptions {
    url: string;
    events: string[];
}
export interface PaymentStatus {
    status: 'pending' | 'completed' | 'failed' | 'expired';
}
export interface PaymentRequest {
    id: string;
    amount: number;
    description: string;
    status: string;
    invoice: string;
    destinationWallet: string;
    expiresAt: string;
    metadata?: Record<string, any>;
    createdAt: string;
    updatedAt: string;
}
export declare class NakaPay {
    private apiKey;
    private baseUrl;
    private client;
    constructor(apiKey: string, options?: {
        baseUrl?: string;
    });
    createPaymentRequest(options: PaymentRequestOptions): Promise<PaymentRequest>;
    getPaymentRequest(id: string): Promise<PaymentRequest>;
    getPaymentStatus(id: string): Promise<PaymentStatus>;
    getPayments(businessId: string, options?: {
        limit?: number;
        offset?: number;
    }): Promise<PaymentRequest[]>;
    registerWebhook(businessId: string, options: WebhookOptions): Promise<{
        success: boolean;
        message: string;
    }>;
    private handleError;
}
export default NakaPay;
//# sourceMappingURL=index.d.ts.map