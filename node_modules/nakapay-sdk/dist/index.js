"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NakaPay = void 0;
const axios_1 = __importDefault(require("axios"));
class NakaPay {
    constructor(apiKey, options = {}) {
        this.apiKey = apiKey;
        this.baseUrl = options.baseUrl || 'https://api.nakapay.app';
        this.client = axios_1.default.create({
            baseURL: this.baseUrl,
            headers: {
                'Authorization': `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json',
            },
        });
    }
    async createPaymentRequest(options) {
        try {
            const response = await this.client.post('/api/v1/payment-requests', options);
            return response.data;
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async getPaymentRequest(id) {
        try {
            const response = await this.client.get(`/api/v1/payment-requests/${id}`);
            return response.data;
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async getPaymentStatus(id) {
        try {
            const response = await this.client.get(`/api/v1/payment-requests/${id}/status`);
            return response.data;
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async getPayments(businessId, options = {}) {
        try {
            const response = await this.client.get(`/api/v1/businesses/${businessId}/payments`, {
                params: options,
            });
            return response.data;
        }
        catch (error) {
            this.handleError(error);
        }
    }
    async registerWebhook(businessId, options) {
        try {
            const response = await this.client.post(`/api/v1/businesses/${businessId}/webhooks`, options);
            return response.data;
        }
        catch (error) {
            this.handleError(error);
        }
    }
    handleError(error) {
        if (error.response) {
            const { status, data } = error.response;
            throw new Error(`NakaPay API Error (${status}): ${data.message || JSON.stringify(data)}`);
        }
        else if (error.request) {
            throw new Error('No response received from NakaPay API');
        }
        else {
            throw new Error(`Error making request to NakaPay API: ${error.message}`);
        }
    }
}
exports.NakaPay = NakaPay;
exports.default = NakaPay;
//# sourceMappingURL=index.js.map